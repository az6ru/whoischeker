"""–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞."""

import asyncio
import logging
from typing import Dict, Optional
from datetime import datetime, timedelta
import json

from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from src.core.dns_checker import DNSChecker
from src.core.scheduler import DomainCheckScheduler
from src.core.whois_checker import WhoisChecker
from src.db.service import DatabaseService
from src.utils.config import load_config
from src.utils.validators import is_valid_domain

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)


class DomainForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞."""
    waiting_for_domain = State()
    waiting_for_interval = State()


class WhoisCheckerBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞."""
        self.config = load_config()
        self.bot = Bot(token=self.config["bot"]["token"])
        self.storage = MemoryStorage()
        self.dp = Dispatcher(storage=self.storage)
        self.db = DatabaseService(self.config["database"]["url"])
        self.whois_checker = WhoisChecker()
        self.dns_checker = DNSChecker()
        self.scheduler = DomainCheckScheduler(
            self.db,
            self.whois_checker,
            self.dns_checker,
            self.send_notification,
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥."""
        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.message.register(self.cmd_help, Command("help"))
        self.dp.message.register(self.cmd_add, Command("add"))
        self.dp.message.register(self.cmd_list, Command("list"))
        self.dp.message.register(self.cmd_delete, Command("delete"))
        self.dp.message.register(self.cmd_status, Command("status"))
        self.dp.message.register(self.cmd_cancel, Command("cancel"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.dp.message.register(
            self.process_domain_name,
            DomainForm.waiting_for_domain,
        )
        self.dp.message.register(
            self.process_check_interval,
            DomainForm.waiting_for_interval,
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        self.dp.callback_query.register(self.process_domain_delete, lambda c: c.data.startswith("delete_"))
        self.dp.callback_query.register(self.process_domain_details, lambda c: c.data.startswith("details_"))
        self.dp.callback_query.register(self.process_domain_dns, lambda c: c.data.startswith("dns_"))
        self.dp.callback_query.register(self.process_domain_whois, lambda c: c.data.startswith("whois_"))
        self.dp.callback_query.register(self.process_back_to_list, lambda c: c.data == "back_to_list")

    async def send_notification(self, chat_id: int, message: str):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

        Args:
            chat_id: ID —á–∞—Ç–∞
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        await self.bot.send_message(
            chat_id=chat_id,
            text=message,
            parse_mode="Markdown",
        )

    async def cmd_start(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ WHOIS –∏ DNS –∑–∞–ø–∏—Å—è—Ö –¥–æ–º–µ–Ω–æ–≤.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/add - –î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –¥–æ–º–µ–Ω–æ–≤\n"
            "/delete - –£–¥–∞–ª–∏—Ç—å –¥–æ–º–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–æ–º–µ–Ω–æ–≤\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
        )

    async def cmd_help(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
        await message.answer(
            "üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
            "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "‚Ä¢ /add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            "‚Ä¢ /list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –¥–æ–º–µ–Ω–æ–≤\n"
            "‚Ä¢ /delete - –£–¥–∞–ª–∏—Ç—å –¥–æ–º–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            "‚Ä¢ /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤\n"
            "‚Ä¢ /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
            "*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
            "1. –î–æ–±–∞–≤—å—Ç–µ –¥–æ–º–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /add\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
            "3. –ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
            "4. –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n"
            "*–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:*\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ –¥–æ–º–µ–Ω—ã\n"
            "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ - 1 —á–∞—Å\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–º–µ–Ω–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ",
            parse_mode="Markdown",
        )

    async def cmd_add(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add."""
        await state.set_state(DomainForm.waiting_for_domain)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, example.com):"
        )

    async def process_domain_name(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥–æ–º–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏."""
        domain = message.text.lower()
        
        if not is_valid_domain(domain):
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –¥–æ–º–µ–Ω
        existing_domain = await self.db.get_domain_by_name(domain)
        if existing_domain:
            await message.answer(
                "‚ùå –≠—Ç–æ—Ç –¥–æ–º–µ–Ω —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–æ–º–µ–Ω–æ–≤."
            )
            await state.clear()
            return

        await state.update_data(domain_name=domain)
        await state.set_state(DomainForm.waiting_for_interval)
        
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [
                    types.KeyboardButton(text="1 —á–∞—Å"),
                    types.KeyboardButton(text="6 —á–∞—Å–æ–≤"),
                ],
                [
                    types.KeyboardButton(text="12 —á–∞—Å–æ–≤"),
                    types.KeyboardButton(text="24 —á–∞—Å–∞"),
                ],
            ],
            resize_keyboard=True,
            one_time_keyboard=True,
        )
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:",
            reply_markup=keyboard,
        )

    async def process_check_interval(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
        intervals = {
            "1 —á–∞—Å": 3600,
            "6 —á–∞—Å–æ–≤": 21600,
            "12 —á–∞—Å–æ–≤": 43200,
            "24 —á–∞—Å–∞": 86400,
        }
        
        if message.text not in intervals:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
            )
            return

        interval = intervals[message.text]
        data = await state.get_data()
        domain_name = data["domain_name"]

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        domain = await self.db.create_domain(
            name=domain_name,
            chat_id=message.chat.id,
            check_interval=interval,
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–µ–Ω –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        await self.scheduler.add_domain(domain)

        await message.answer(
            f"‚úÖ –î–æ–º–µ–Ω {domain_name} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n"
            f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {message.text}",
            reply_markup=types.ReplyKeyboardRemove(),
        )
        await state.clear()

    async def cmd_list(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list."""
        domains = await self.db.get_domains_by_chat(message.chat.id)
        
        if not domains:
            await message.answer(
                "üìù –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –¥–æ–º–µ–Ω–æ–≤.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω."
            )
            return

        response = ["üìù *–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –¥–æ–º–µ–Ω–æ–≤:*\n"]
        for domain in domains:
            interval_hours = domain.check_interval / 3600
            response.append(
                f"‚Ä¢ {domain.name}\n"
                f"  ‚îî –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {interval_hours:.0f} —á."
            )

        await message.answer(
            "\n".join(response),
            parse_mode="Markdown",
        )

    async def cmd_delete(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete."""
        domains = await self.db.get_domains_by_chat(message.chat.id)
        
        if not domains:
            await message.answer(
                "üìù –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –¥–æ–º–µ–Ω–æ–≤.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω."
            )
            return

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=domain.name,
                        callback_data=f"delete_{domain.id}",
                    )
                ]
                for domain in domains
            ]
        )

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=keyboard,
        )
        
    async def process_domain_delete(self, callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞."""
        domain_id = int(callback_query.data.split("_")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–µ–Ω–µ
        domain = await self.db.get_domain_by_id(domain_id)
        if not domain:
            await callback_query.answer("–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –£–¥–∞–ª—è–µ–º –¥–æ–º–µ–Ω –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ –ë–î
        await self.scheduler.remove_domain(domain_id)
        await self.db.delete_domain(domain_id)
        
        await callback_query.answer(f"–î–æ–º–µ–Ω {domain.name} —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
        await callback_query.message.edit_text(f"‚úÖ –î–æ–º–µ–Ω {domain.name} —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")

    async def cmd_status(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status."""
        domains = await self.db.get_domains_by_chat(message.chat.id)
        
        if not domains:
            await message.answer(
                "üìù –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –¥–æ–º–µ–Ω–æ–≤.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω."
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–º–µ–Ω–∞
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=domain.name,
                        callback_data=f"details_{domain.id}",
                    )
                ]
                for domain in domains
            ]
        )

        await message.answer(
            "üìä *–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:*",
            parse_mode="Markdown",
            reply_markup=keyboard,
        )
        
    async def process_domain_details(self, callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–º–µ–Ω–µ."""
        domain_id = int(callback_query.data.split("_")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–µ–Ω–µ
        domain = await self.db.get_domain_by_id(domain_id)
        if not domain:
            await callback_query.answer("–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é WHOIS –∑–∞–ø–∏—Å—å
        whois = await self.db.get_last_whois_record(domain_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–µ–Ω–µ
        if whois:
            last_check = whois.created_at.strftime("%d.%m.%Y %H:%M:%S")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–º–µ–Ω–∞
            if isinstance(whois.status, list) and whois.status:
                status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
            elif isinstance(whois.status, str) and whois.status:
                status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
            else:
                status = "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ä–æ–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            expiration_date = (
                whois.expiration_date.strftime("%d.%m.%Y")
                if whois.expiration_date
                else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            )
        else:
            last_check = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            status = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            expiration_date = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ WHOIS –∏ DNS
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üìù WHOIS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                        callback_data=f"whois_{domain_id}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üåê DNS –∑–∞–ø–∏—Å–∏",
                        callback_data=f"dns_{domain_id}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                        callback_data="back_to_list",
                    )
                ],
            ]
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        message_text = (
            f"üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–µ–Ω–µ {domain.name}*\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–°—Ä–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ: {expiration_date}\n"
            f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {domain.check_interval // 3600} —á.\n"
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        )
        
        await callback_query.message.edit_text(
            message_text,
            parse_mode="Markdown",
            reply_markup=keyboard,
        )
        await callback_query.answer()
        
    async def process_domain_whois(self, callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ WHOIS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
        domain_id = int(callback_query.data.split("_")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–µ–Ω–µ
        domain = await self.db.get_domain_by_id(domain_id)
        if not domain:
            await callback_query.answer("–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é WHOIS –∑–∞–ø–∏—Å—å
        whois_record = await self.db.get_last_whois_record(domain_id)
        
        if whois_record:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å WHOIS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            whois_info = [f"üìÑ *WHOIS-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–æ–º–µ–Ω–∞: {domain.name}*\n"]
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            if whois_record.registrar:
                whois_info.append(f"üè¢ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* {whois_record.registrar}")
                if whois_record.registrar_url:
                    whois_info.append(f"üîó {whois_record.registrar_url}")
                whois_info.append("")
            
            # –°—Ç–∞—Ç—É—Å
            if whois_record.status:
                status_list = json.loads(whois_record.status) if isinstance(whois_record.status, str) else whois_record.status
                if status_list:
                    whois_info.append("üìå *–°—Ç–∞—Ç—É—Å:*")
                    for status in status_list:
                        whois_info.append(f"‚Ä¢ {status}")
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
                    for status in status_list:
                        if "clientTransferProhibited" in status:
                            whois_info.append("üîó https://icann.org/epp#clientTransferProhibited")
                        elif "pendingDelete" in status:
                            whois_info.append("üîó https://icann.org/epp#pendingDelete")
                    whois_info.append("")
            
            # –î–∞—Ç—ã
            dates_info = []
            if whois_record.creation_date:
                dates_info.append(f"‚Ä¢ –°–æ–∑–¥–∞–Ω: {whois_record.creation_date.strftime('%d.%m.%Y')}")
            if whois_record.last_updated:
                dates_info.append(f"‚Ä¢ –û–±–Ω–æ–≤–ª—ë–Ω: {whois_record.last_updated.strftime('%d.%m.%Y')}")
            if whois_record.expiration_date:
                dates_info.append(f"‚Ä¢ –°—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {whois_record.expiration_date.strftime('%d.%m.%Y')}")
            
            if dates_info:
                whois_info.append("üìÖ *–î–∞—Ç—ã:*")
                whois_info.extend(dates_info)
                whois_info.append("")
            
            # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            whois_info.append(f"üßæ *–í–ª–∞–¥–µ–ª–µ—Ü:* {whois_record.owner or '‚Äî'}")
            whois_info.append(f"üë§ *–ê–¥–º–∏–Ω. –∫–æ–Ω—Ç–∞–∫—Ç:* {whois_record.admin_contact or '‚Äî'}")
            whois_info.append(f"üõ†Ô∏è *–¢–µ—Ö. –∫–æ–Ω—Ç–∞–∫—Ç:* {whois_record.tech_contact or '‚Äî'}")
            whois_info.append("")
            
            # –°–µ—Ä–≤–µ—Ä—ã –∏–º–µ–Ω
            if whois_record.name_servers:
                ns_list = json.loads(whois_record.name_servers) if isinstance(whois_record.name_servers, str) else whois_record.name_servers
                if ns_list:
                    whois_info.append("üõ∞ *NS-—Å–µ—Ä–≤–µ—Ä—ã:*")
                    for ns in ns_list:
                        whois_info.append(f"‚Ä¢ {ns}")
                    whois_info.append("")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            whois_info.append(f"üîç *WHOIS-—Å–µ—Ä–≤–µ—Ä:* {whois_record.whois_server or '‚Äî'}")
            whois_info.append(f"üîê *DNSSEC:* {whois_record.dnssec or 'unsigned'}")
            whois_info.append("")
            
            # –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            if hasattr(whois_record, 'created_at') and whois_record.created_at:
                whois_info.append(f"üïí *–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:* {whois_record.created_at.strftime('%d.%m.%Y %H:%M:%S')}")
        else:
            whois_info = [
                f"üìÑ *WHOIS-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–æ–º–µ–Ω–∞ {domain.name}*\n",
                "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö WHOIS. –í–æ–∑–º–æ–∂–Ω–æ, –¥–æ–º–µ–Ω –µ—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª—Å—è."
            ]
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="¬´ –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–º–µ–Ω–µ",
                        callback_data=f"details_{domain_id}",
                    )
                ],
            ]
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.edit_text(
            "\n".join(whois_info),
            parse_mode="Markdown",
            reply_markup=keyboard,
        )
        await callback_query.answer()
        
    async def process_domain_dns(self, callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ DNS –∑–∞–ø–∏—Å–µ–π."""
        domain_id = int(callback_query.data.split("_")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–µ–Ω–µ
        domain = await self.db.get_domain_by_id(domain_id)
        if not domain:
            await callback_query.answer("–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω—ã DNS –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–æ–º–µ–Ω–∞ {domain.name} (ID: {domain_id})")
        
        # –ù–∞–ø—Ä—è–º—É—é –ø–æ–ª—É—á–∞–µ–º DNS –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        async with self.db.async_session() as session:
            from sqlalchemy import select, desc
            from src.db.models import DNSRecord
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            query = select(DNSRecord).where(DNSRecord.domain_id == domain_id).order_by(desc(DNSRecord.created_at))
            result = await session.execute(query)
            all_records = result.scalars().all()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ —Ç–∏–ø—É, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ
            latest_records = {}
            for record in all_records:
                if record.record_type not in latest_records:
                    latest_records[record.record_type] = record
            
            logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(latest_records)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ DNS –∑–∞–ø–∏—Å–µ–π")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å DNS –∑–∞–ø–∏—Å—è–º–∏ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            dns_info = [f"üåê *DNS-–∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–æ–º–µ–Ω–∞: {domain.name}*\n"]
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∏–ø—ã DNS –∑–∞–ø–∏—Å–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –≤—Å–µ–≥–¥–∞ —Ö–æ—Ç–∏–º –ø–æ–∫–∞–∑–∞—Ç—å
            standard_record_types = ["A", "AAAA", "MX", "NS", "SOA", "TXT", "CNAME", "PTR", "SRV"]
            
            # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø–∏—Å–µ–π
            record_icons = {
                "A": "üìç",
                "AAAA": "üìç",
                "MX": "üì¨",
                "NS": "üîí",
                "SOA": "üìÑ",
                "TXT": "üì•",
                "CNAME": "üîÅ",
                "PTR": "üìå",
                "SRV": "üì¶"
            }
            
            # –ù–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø–∏—Å–µ–π
            record_names = {
                "A": "A-–∑–∞–ø–∏—Å—å",
                "AAAA": "AAAA-–∑–∞–ø–∏—Å—å",
                "MX": "MX-–∑–∞–ø–∏—Å–∏",
                "NS": "NS-—Å–µ—Ä–≤–µ—Ä—ã",
                "SOA": "SOA-–∑–∞–ø–∏—Å—å",
                "TXT": "TXT-–∑–∞–ø–∏—Å–∏",
                "CNAME": "CNAME",
                "PTR": "PTR",
                "SRV": "SRV"
            }
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∏–ø—ã –∏ –∏–º–µ—é—â–∏–µ—Å—è —Ç–∏–ø—ã
            all_record_types = list(set(standard_record_types) | set(latest_records.keys()))
            all_record_types.sort()  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
            for record_type in all_record_types:
                icon = record_icons.get(record_type, "üîπ")
                name = record_names.get(record_type, f"{record_type}-–∑–∞–ø–∏—Å—å")
                
                if record_type in latest_records:
                    record = latest_records[record_type]
                    try:
                        import json
                        values = json.loads(record.values)
                        ttl = record.ttl if record.ttl else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                        
                        logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ {record_type}: {values}, TTL={ttl}")
                        
                        dns_info.append(f"{icon} *{name}:*")
                        if values:
                            for value in values:
                                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
                                escaped_value = value.replace("_", "\\_").replace("*", "\\*").replace("[", "\\[").replace("`", "\\`")
                                dns_info.append(f"‚Ä¢ {escaped_value} (TTL: {ttl})")
                            dns_info.append("")
                        else:
                            dns_info.append("‚Ä¢ ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ {record_type}: {e}")
                        dns_info.append(f"{icon} *{name}:*")
                        dns_info.append(f"‚Ä¢ ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}\n")
                else:
                    logger.debug(f"–ó–∞–ø–∏—Å—å {record_type} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø—ã –∑–∞–ø–∏—Å–µ–π
                    dns_info.append(f"{icon} *{name}:*")
                    dns_info.append("‚Ä¢ ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞\n")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
            current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            dns_info.append(f"üïí *–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:* {current_time}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="¬´ –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–º–µ–Ω–µ",
                            callback_data=f"details_{domain_id}",
                        )
                    ],
                ]
            )
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback_query.message.edit_text(
                    "\n".join(dns_info),
                    parse_mode="Markdown",
                    reply_markup=keyboard,
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ DNS –∑–∞–ø–∏—Å–µ–π: {e}")
                # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await callback_query.message.edit_text(
                    f"DNS –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–æ–º–µ–Ω–∞ {domain.name}\n\n" + 
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ.\n" +
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–º–µ–Ω–µ.",
                    reply_markup=keyboard,
                )
            
            await callback_query.answer()
        
    async def process_back_to_list(self, callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –¥–æ–º–µ–Ω–æ–≤."""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        domains = await self.db.get_domains_by_chat(callback_query.from_user.id)
        
        if not domains:
            await callback_query.message.edit_text(
                "üìù –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –¥–æ–º–µ–Ω–æ–≤.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω."
            )
            await callback_query.answer()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–º–µ–Ω–∞
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=domain.name,
                        callback_data=f"details_{domain.id}",
                    )
                ]
                for domain in domains
            ]
        )
        
        await callback_query.message.edit_text(
            "üìä *–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:*",
            parse_mode="Markdown",
            reply_markup=keyboard,
        )
        await callback_query.answer()

    async def cmd_cancel(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel."""
        current_state = await state.get_state()
        
        if current_state is None:
            await message.answer(
                "ü§î –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥."
            )
            return

        await state.clear()
        await message.answer(
            "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=types.ReplyKeyboardRemove(),
        )

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self.db.init_db()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        await self.scheduler.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await self.dp.start_polling(self.bot)

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞."""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        await self.scheduler.stop()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        await self.db.close()


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞."""
    bot = WhoisCheckerBot()
    
    try:
        await bot.start()
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    finally:
        await bot.stop()


if __name__ == "__main__":
    asyncio.run(main()) 