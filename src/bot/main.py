"""–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞."""

import asyncio
import logging
from typing import Dict, Optional

from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from src.core.dns_checker import DNSChecker
from src.core.scheduler import DomainCheckScheduler
from src.core.whois_checker import WhoisChecker
from src.db.service import DatabaseService
from src.utils.config import load_config
from src.utils.validators import is_valid_domain

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)


class DomainForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞."""
    waiting_for_domain = State()
    waiting_for_interval = State()


class WhoisCheckerBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞."""
        self.config = load_config()
        self.bot = Bot(token=self.config["bot"]["token"])
        self.storage = MemoryStorage()
        self.dp = Dispatcher(storage=self.storage)
        self.db = DatabaseService(self.config["database"]["url"])
        self.whois_checker = WhoisChecker()
        self.dns_checker = DNSChecker()
        self.scheduler = DomainCheckScheduler(
            self.db,
            self.whois_checker,
            self.dns_checker,
            self.send_notification,
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥."""
        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.message.register(self.cmd_help, Command("help"))
        self.dp.message.register(self.cmd_add, Command("add"))
        self.dp.message.register(self.cmd_list, Command("list"))
        self.dp.message.register(self.cmd_delete, Command("delete"))
        self.dp.message.register(self.cmd_status, Command("status"))
        self.dp.message.register(self.cmd_cancel, Command("cancel"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.dp.message.register(
            self.process_domain_name,
            DomainForm.waiting_for_domain,
        )
        self.dp.message.register(
            self.process_check_interval,
            DomainForm.waiting_for_interval,
        )

    async def send_notification(self, chat_id: int, message: str):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

        Args:
            chat_id: ID —á–∞—Ç–∞
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        await self.bot.send_message(
            chat_id=chat_id,
            text=message,
            parse_mode="Markdown",
        )

    async def cmd_start(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ WHOIS –∏ DNS –∑–∞–ø–∏—Å—è—Ö –¥–æ–º–µ–Ω–æ–≤.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/add - –î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –¥–æ–º–µ–Ω–æ–≤\n"
            "/delete - –£–¥–∞–ª–∏—Ç—å –¥–æ–º–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–æ–º–µ–Ω–æ–≤\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
        )

    async def cmd_help(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
        await message.answer(
            "üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
            "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "‚Ä¢ /add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            "‚Ä¢ /list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –¥–æ–º–µ–Ω–æ–≤\n"
            "‚Ä¢ /delete - –£–¥–∞–ª–∏—Ç—å –¥–æ–º–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            "‚Ä¢ /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤\n"
            "‚Ä¢ /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
            "*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
            "1. –î–æ–±–∞–≤—å—Ç–µ –¥–æ–º–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /add\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
            "3. –ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
            "4. –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n"
            "*–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:*\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ –¥–æ–º–µ–Ω—ã\n"
            "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ - 1 —á–∞—Å\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–º–µ–Ω–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ",
            parse_mode="Markdown",
        )

    async def cmd_add(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add."""
        await state.set_state(DomainForm.waiting_for_domain)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, example.com):"
        )

    async def process_domain_name(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥–æ–º–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏."""
        domain = message.text.lower()
        
        if not is_valid_domain(domain):
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –¥–æ–º–µ–Ω
        existing_domain = await self.db.get_domain_by_name(domain)
        if existing_domain:
            await message.answer(
                "‚ùå –≠—Ç–æ—Ç –¥–æ–º–µ–Ω —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–æ–º–µ–Ω–æ–≤."
            )
            await state.clear()
            return

        await state.update_data(domain_name=domain)
        await state.set_state(DomainForm.waiting_for_interval)
        
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [
                    types.KeyboardButton(text="1 —á–∞—Å"),
                    types.KeyboardButton(text="6 —á–∞—Å–æ–≤"),
                ],
                [
                    types.KeyboardButton(text="12 —á–∞—Å–æ–≤"),
                    types.KeyboardButton(text="24 —á–∞—Å–∞"),
                ],
            ],
            resize_keyboard=True,
            one_time_keyboard=True,
        )
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:",
            reply_markup=keyboard,
        )

    async def process_check_interval(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
        intervals = {
            "1 —á–∞—Å": 3600,
            "6 —á–∞—Å–æ–≤": 21600,
            "12 —á–∞—Å–æ–≤": 43200,
            "24 —á–∞—Å–∞": 86400,
        }
        
        if message.text not in intervals:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
            )
            return

        interval = intervals[message.text]
        data = await state.get_data()
        domain_name = data["domain_name"]

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        domain = await self.db.create_domain(
            name=domain_name,
            chat_id=message.chat.id,
            check_interval=interval,
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–µ–Ω –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        await self.scheduler.add_domain(domain)

        await message.answer(
            f"‚úÖ –î–æ–º–µ–Ω {domain_name} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n"
            f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {message.text}",
            reply_markup=types.ReplyKeyboardRemove(),
        )
        await state.clear()

    async def cmd_list(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list."""
        domains = await self.db.get_domains_by_chat(message.chat.id)
        
        if not domains:
            await message.answer(
                "üìù –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –¥–æ–º–µ–Ω–æ–≤.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω."
            )
            return

        response = ["üìù *–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –¥–æ–º–µ–Ω–æ–≤:*\n"]
        for domain in domains:
            interval_hours = domain.check_interval / 3600
            response.append(
                f"‚Ä¢ {domain.name}\n"
                f"  ‚îî –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {interval_hours:.0f} —á."
            )

        await message.answer(
            "\n".join(response),
            parse_mode="Markdown",
        )

    async def cmd_delete(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete."""
        domains = await self.db.get_domains_by_chat(message.chat.id)
        
        if not domains:
            await message.answer(
                "üìù –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –¥–æ–º–µ–Ω–æ–≤.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω."
            )
            return

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=domain.name,
                        callback_data=f"delete_{domain.id}",
                    )
                ]
                for domain in domains
            ]
        )

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=keyboard,
        )

    async def cmd_status(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status."""
        domains = await self.db.get_domains_by_chat(message.chat.id)
        
        if not domains:
            await message.answer(
                "üìù –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –¥–æ–º–µ–Ω–æ–≤.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω."
            )
            return

        status_message = ["üìä *–°—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –¥–æ–º–µ–Ω–æ–≤:*\n"]
        
        for domain in domains:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            whois = await self.db.get_last_whois_record(domain.id)
            
            if whois:
                last_check = whois.created_at.strftime("%d.%m.%Y %H:%M:%S")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–º–µ–Ω–∞
                if isinstance(whois.status, list) and whois.status:
                    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
                    status_details = ", ".join(whois.status)
                elif isinstance(whois.status, str) and whois.status:
                    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
                    status_details = whois.status
                else:
                    status = "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                    status_details = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—É—Å–µ"
                
                expiration = (
                    whois.expiration_date.strftime("%d.%m.%Y")
                    if whois.expiration_date
                    else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                )
            else:
                last_check = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                status = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                status_details = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                expiration = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

            status_message.extend([
                f"‚Ä¢ *{domain.name}*",
                f"  ‚îî –°—Ç–∞—Ç—É—Å: {status}",
                f"  ‚îî –î–µ—Ç–∞–ª–∏ —Å—Ç–∞—Ç—É—Å–∞: {status_details}",
                f"  ‚îî –°—Ä–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ: {expiration}",
                f"  ‚îî –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check}\n",
            ])

        await message.answer(
            "\n".join(status_message),
            parse_mode="Markdown",
        )

    async def cmd_cancel(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel."""
        current_state = await state.get_state()
        
        if current_state is None:
            await message.answer(
                "ü§î –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥."
            )
            return

        await state.clear()
        await message.answer(
            "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=types.ReplyKeyboardRemove(),
        )

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self.db.init_db()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        await self.scheduler.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await self.dp.start_polling(self.bot)

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞."""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        await self.scheduler.stop()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        await self.db.close()


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞."""
    bot = WhoisCheckerBot()
    
    try:
        await bot.start()
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    finally:
        await bot.stop()


if __name__ == "__main__":
    asyncio.run(main()) 