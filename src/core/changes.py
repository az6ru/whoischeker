"""–ú–æ–¥—É–ª—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ WHOIS –∏ DNS –∑–∞–ø–∏—Å—è—Ö."""

from dataclasses import dataclass
from datetime import datetime
from typing import Dict, List, Optional, Set, Tuple

from src.core.whois_checker import WhoisInfo
from src.core.dns_checker import DNSInfo
from src.db.models import Domain


@dataclass
class WhoisChange:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ WHOIS –∑–∞–ø–∏—Å–∏."""
    field: str
    old_value: str
    new_value: str


@dataclass
class DNSChange:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ DNS –∑–∞–ø–∏—Å–∏."""
    record_type: str
    old_values: List[str]
    new_values: List[str]


@dataclass
class DomainChanges:
    """–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–æ–º–µ–Ω–µ."""
    domain: Domain
    whois_changes: List[WhoisChange]
    dns_changes: List[DNSChange]
    check_time: datetime


def compare_whois_records(
    old_record: Optional[WhoisInfo],
    new_record: WhoisInfo,
) -> List[WhoisChange]:
    """
    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ WHOIS –∑–∞–ø–∏—Å–µ–π.

    Args:
        old_record: –ü—Ä–µ–¥—ã–¥—É—â–∞—è WHOIS –∑–∞–ø–∏—Å—å
        new_record: –ù–æ–≤–∞—è WHOIS –∑–∞–ø–∏—Å—å

    Returns:
        List[WhoisChange]: –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    """
    changes = []
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if not old_record:
        return []

    # –ü–æ–ª—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –∏—Ö —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    fields_to_compare = {
        "registrar": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        "creation_date": "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
        "expiration_date": "–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è",
        "last_updated": "–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
        "status": "–°—Ç–∞—Ç—É—Å",
        "name_servers": "–°–µ—Ä–≤–µ—Ä—ã –∏–º–µ–Ω",
    }

    for field, display_name in fields_to_compare.items():
        old_value = getattr(old_record, field)
        new_value = getattr(new_record, field)

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
        if old_value is None and new_value is None:
            continue

        # –î–ª—è —Å–ø–∏—Å–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, name_servers)
        if isinstance(old_value, (list, tuple)) or isinstance(new_value, (list, tuple)):
            old_set = set(old_value) if old_value else set()
            new_set = set(new_value) if new_value else set()
            if old_set != new_set:
                changes.append(
                    WhoisChange(
                        field=display_name,
                        old_value=", ".join(sorted(old_set)) if old_set else "(–ø—É—Å—Ç–æ)",
                        new_value=", ".join(sorted(new_set)) if new_set else "(–ø—É—Å—Ç–æ)",
                    )
                )
        # –î–ª—è –¥–∞—Ç
        elif isinstance(old_value, datetime) or isinstance(new_value, datetime):
            old_str = old_value.strftime("%d.%m.%Y %H:%M:%S") if old_value else "(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)"
            new_str = new_value.strftime("%d.%m.%Y %H:%M:%S") if new_value else "(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)"
            if old_str != new_str:
                changes.append(
                    WhoisChange(
                        field=display_name,
                        old_value=old_str,
                        new_value=new_str,
                    )
                )
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤
        elif old_value != new_value:
            changes.append(
                WhoisChange(
                    field=display_name,
                    old_value=str(old_value) if old_value is not None else "(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)",
                    new_value=str(new_value) if new_value is not None else "(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)",
                )
            )

    return changes


def compare_dns_records(
    old_info: Optional[DNSInfo],
    new_info: DNSInfo,
) -> List[DNSChange]:
    """
    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ DNS –∑–∞–ø–∏—Å–µ–π.

    Args:
        old_info: –°—Ç–∞—Ä–∞—è DNS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        new_info: –ù–æ–≤–∞—è DNS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

    Returns:
        List[DNSChange]: –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    """
    changes = []

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if not old_info:
        return []

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    all_types = set(old_info.records.keys()) | set(new_info.records.keys())
    for record_type in all_types:
        old_record = old_info.records.get(record_type)
        new_record = new_info.records.get(record_type)

        old_values = set(old_record.values) if old_record else set()
        new_values = set(new_record.values) if new_record else set()

        if old_values != new_values:
            changes.append(
                DNSChange(
                    record_type=record_type,
                    old_values=sorted(old_values) if old_values else [],
                    new_values=sorted(new_values) if new_values else [],
                )
            )

    return changes


def format_changes_message(changes: DomainChanges) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.

    Args:
        changes: –û–±—ä–µ–∫—Ç —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    lines = [
        f"üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –¥–æ–º–µ–Ω–∞ *{changes.domain.name}*\n"
        f"_–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {changes.check_time.strftime('%d.%m.%Y %H:%M:%S')}_\n"
    ]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º WHOIS –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if changes.whois_changes:
        lines.append("\nüìù *–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ WHOIS:*")
        for change in changes.whois_changes:
            lines.append(
                f"‚Ä¢ {change.field}:\n"
                f"  - –ë—ã–ª–æ: {change.old_value}\n"
                f"  - –°—Ç–∞–ª–æ: {change.new_value}"
            )

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º DNS –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if changes.dns_changes:
        lines.append("\nüåê *–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ DNS –∑–∞–ø–∏—Å—è—Ö:*")
        for change in changes.dns_changes:
            lines.append(
                f"‚Ä¢ –ó–∞–ø–∏—Å—å {change.record_type}:\n"
                f"  - –ë—ã–ª–æ: {', '.join(change.old_values) if change.old_values else '(–ø—É—Å—Ç–æ)'}\n"
                f"  - –°—Ç–∞–ª–æ: {', '.join(change.new_values) if change.new_values else '(–ø—É—Å—Ç–æ)'}"
            )

    return "\n".join(lines) 