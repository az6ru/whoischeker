"""–ú–æ–¥—É–ª—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ WHOIS –∏ DNS –∑–∞–ø–∏—Å—è—Ö."""

from dataclasses import dataclass
from datetime import datetime
from typing import Dict, List, Optional, Set, Tuple

from src.core.whois_checker import WhoisInfo
from src.core.dns_checker import DNSInfo
from src.db.models import Domain


@dataclass
class WhoisChange:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ WHOIS –∑–∞–ø–∏—Å–∏."""
    field: str
    old_value: str
    new_value: str


@dataclass
class DNSChange:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ DNS –∑–∞–ø–∏—Å–∏."""
    record_type: str
    old_values: List[str]
    new_values: List[str]


@dataclass
class DomainChanges:
    """–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–æ–º–µ–Ω–µ."""
    domain: Domain
    whois_changes: List[WhoisChange]
    dns_changes: List[DNSChange]
    check_time: datetime


def compare_whois_records(
    old_record: Optional[WhoisInfo],
    new_record: WhoisInfo,
) -> List[WhoisChange]:
    """
    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ WHOIS –∑–∞–ø–∏—Å–µ–π.

    Args:
        old_record: –ü—Ä–µ–¥—ã–¥—É—â–∞—è WHOIS –∑–∞–ø–∏—Å—å
        new_record: –ù–æ–≤–∞—è WHOIS –∑–∞–ø–∏—Å—å

    Returns:
        List[WhoisChange]: –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    """
    changes = []
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if not old_record:
        return []

    # –ü–æ–ª—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –∏—Ö —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    fields_to_compare = {
        "registrar": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        "registrar_url": "URL —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "creation_date": "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
        "expiration_date": "–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è",
        "last_updated": "–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
        "status": "–°—Ç–∞—Ç—É—Å",
        "name_servers": "–°–µ—Ä–≤–µ—Ä—ã –∏–º–µ–Ω",
        "emails": "Email –∫–æ–Ω—Ç–∞–∫—Ç—ã",
        "owner": "–í–ª–∞–¥–µ–ª–µ—Ü",
        "admin_contact": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç",
        "tech_contact": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–∞–∫—Ç",
        "address": "–ê–¥—Ä–µ—Å",
        "phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
        "dnssec": "DNSSEC",
        "whois_server": "WHOIS —Å–µ—Ä–≤–µ—Ä",
    }

    for field, display_name in fields_to_compare.items():
        old_value = getattr(old_record, field)
        new_value = getattr(new_record, field)

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è None
        if old_value is None and new_value is None:
            continue

        # –î–ª—è —Å–ø–∏—Å–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, name_servers)
        if isinstance(old_value, (list, tuple)) or isinstance(new_value, (list, tuple)):
            old_set = set(old_value) if old_value else set()
            new_set = set(new_value) if new_value else set()
            if old_set != new_set:
                changes.append(
                    WhoisChange(
                        field=display_name,
                        old_value=", ".join(sorted(old_set)) if old_set else "(–ø—É—Å—Ç–æ)",
                        new_value=", ".join(sorted(new_set)) if new_set else "(–ø—É—Å—Ç–æ)",
                    )
                )
        # –î–ª—è –¥–∞—Ç
        elif isinstance(old_value, datetime) or isinstance(new_value, datetime):
            old_str = old_value.strftime("%d.%m.%Y %H:%M:%S") if old_value else "(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)"
            new_str = new_value.strftime("%d.%m.%Y %H:%M:%S") if new_value else "(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)"
            if old_str != new_str:
                changes.append(
                    WhoisChange(
                        field=display_name,
                        old_value=old_str,
                        new_value=new_str,
                    )
                )
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤
        elif old_value != new_value:
            changes.append(
                WhoisChange(
                    field=display_name,
                    old_value=str(old_value) if old_value is not None else "(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)",
                    new_value=str(new_value) if new_value is not None else "(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)",
                )
            )

    return changes


def compare_dns_records(
    old_info: Optional[DNSInfo],
    new_info: DNSInfo,
) -> List[DNSChange]:
    """
    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ DNS –∑–∞–ø–∏—Å–µ–π.

    Args:
        old_info: –°—Ç–∞—Ä–∞—è DNS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        new_info: –ù–æ–≤–∞—è DNS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

    Returns:
        List[DNSChange]: –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    """
    changes = []

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if not old_info:
        import logging
        logger = logging.getLogger(__name__)
        logger.info("–ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ DNS –∑–∞–ø–∏—Å–µ–π, –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è")
        return []

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    all_types = set(old_info.records.keys()) | set(new_info.records.keys())
    
    import logging
    logger = logging.getLogger(__name__)
    logger.debug(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ DNS –∑–∞–ø–∏—Å–µ–π: —Å—Ç–∞—Ä—ã–µ —Ç–∏–ø—ã: {set(old_info.records.keys())}, –Ω–æ–≤—ã–µ —Ç–∏–ø—ã: {set(new_info.records.keys())}")
    
    for record_type in all_types:
        old_record = old_info.records.get(record_type)
        new_record = new_info.records.get(record_type)

        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç –Ω–∏ –≤ —Å—Ç–∞—Ä—ã—Ö, –Ω–∏ –≤ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if not old_record and not new_record:
            logger.debug(f"–¢–∏–ø –∑–∞–ø–∏—Å–∏ {record_type}: –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è, —Ç.–∫. –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–±–æ–∏—Ö –Ω–∞–±–æ—Ä–∞—Ö")
            continue
            
        old_values = set(old_record.values) if old_record and hasattr(old_record, 'values') and old_record.values else set()
        new_values = set(new_record.values) if new_record and hasattr(new_record, 'values') and new_record.values else set()

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"–¢–∏–ø –∑–∞–ø–∏—Å–∏ {record_type}: —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {old_values}, –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {new_values}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if old_values != new_values:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è
            # –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ø—É—Å—Ç—ã–º–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            if not (not old_values and not new_values):
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∑–∞–ø–∏—Å–∏ {record_type}: {old_values} -> {new_values}")
                changes.append(
                    DNSChange(
                        record_type=record_type,
                        old_values=sorted(old_values) if old_values else [],
                        new_values=sorted(new_values) if new_values else [],
                    )
                )
        else:
            logger.debug(f"–¢–∏–ø –∑–∞–ø–∏—Å–∏ {record_type}: –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")

    return changes


def format_changes_message(changes: DomainChanges) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.

    Args:
        changes: –û–±—ä–µ–∫—Ç —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    lines = [
        f"üîî *–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ DNS-–¥–æ–º–µ–Ω–µ: {changes.domain.name}*\n"
        f"üìÖ *–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:* {changes.check_time.strftime('%d.%m.%Y %H:%M:%S')}\n"
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if changes.whois_changes or changes.dns_changes:
        lines.append("üìå *–ò–∑–º–µ–Ω–µ–Ω–∏—è:*\n")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º WHOIS –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if changes.whois_changes:
        lines.append("üìÑ *WHOIS-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*")
        for change in changes.whois_changes:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            old_value = change.old_value
            new_value = change.new_value
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            if len(old_value) > 100:
                old_value = old_value[:97] + "..."
            if len(new_value) > 100:
                new_value = new_value[:97] + "..."
                
            lines.append(
                f"‚Ä¢ *{change.field}*:\n"
                f"  –ë—ã–ª–æ: {old_value}\n"
                f"  –°—Ç–∞–ª–æ: {new_value}\n"
            )

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º DNS –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if changes.dns_changes:
        # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        change_icons = {
            "add": "üÜï",
            "remove": "‚ùå",
            "update": "‚úèÔ∏è"
        }
        
        # –ù–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø–∏—Å–µ–π
        record_names = {
            "A": "A-–∑–∞–ø–∏—Å—å",
            "AAAA": "AAAA-–∑–∞–ø–∏—Å—å",
            "MX": "MX-–∑–∞–ø–∏—Å–∏",
            "NS": "NS-–∑–∞–ø–∏—Å–∏",
            "SOA": "SOA-–∑–∞–ø–∏—Å—å",
            "TXT": "TXT-–∑–∞–ø–∏—Å—å",
            "CNAME": "CNAME-–∑–∞–ø–∏—Å—å",
            "PTR": "PTR-–∑–∞–ø–∏—Å—å",
            "SRV": "SRV-–∑–∞–ø–∏—Å—å"
        }
        
        for change in changes.dns_changes:
            # –î–ª—è DNS-–∑–∞–ø–∏—Å–µ–π –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if not change.old_values and change.new_values:
                change_type = "add"
                change_desc = "–¥–æ–±–∞–≤–ª–µ–Ω–∞"
            elif change.old_values and not change.new_values:
                change_type = "remove"
                change_desc = "—É–¥–∞–ª–µ–Ω–∞"
            else:
                change_type = "update"
                change_desc = "–æ–±–Ω–æ–≤–ª–µ–Ω–∞"
                
            icon = change_icons.get(change_type, "üîÑ")
            name = record_names.get(change.record_type, f"{change.record_type}-–∑–∞–ø–∏—Å—å")
            
            lines.append(
                f"{icon} *{name} {change_desc}:*"
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if change.old_values:
                lines.append("  –ë—ã–ª–æ:")
                for value in change.old_values:
                    lines.append(f"  ‚Ä¢ {value}")
            else:
                lines.append("  –ë—ã–ª–æ: ‚Äî")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if change.new_values:
                lines.append("  –°—Ç–∞–ª–æ:")
                for value in change.new_values:
                    # –î–ª—è TXT –∑–∞–ø–∏—Å–µ–π —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –≤—ã–¥–µ–ª—è–µ–º –∏—Ö
                    if change.record_type == "TXT" and ("id:" in value.lower() or "uuid" in value.lower() or "v=spf" in value.lower()):
                        lines.append(f"  ‚û§ {value}")
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –≤—ã–¥–µ–ª—è–µ–º –µ–≥–æ
                        if "id:" in value.lower():
                            id_part = value.split("id:")[1].strip().split()[0].strip('"\'')
                            lines.append(f"  üîë ID: {id_part}")
                    else:
                        lines.append(f"  ‚Ä¢ {value}")
            else:
                lines.append("  –°—Ç–∞–ª–æ: ‚Äî")
            
            lines.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    lines.append("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/status` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

    return "\n".join(lines) 