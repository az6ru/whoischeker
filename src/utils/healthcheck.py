"""–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞."""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent.parent))

from src.core.dns_checker import DNSChecker
from src.core.whois_checker import WhoisChecker
from src.db.service import DatabaseService
from src.utils.config import load_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)


async def check_database(config):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        config: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        
    Returns:
        bool: True, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞, –∏–Ω–∞—á–µ False
    """
    try:
        db = DatabaseService(config["database"]["url"])
        await db.init_db()
        # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        await db.get_all_domains()
        await db.close()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


async def check_whois_service():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É WHOIS —Å–µ—Ä–≤–∏—Å–∞.
    
    Returns:
        bool: True, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞, –∏–Ω–∞—á–µ False
    """
    try:
        whois_checker = WhoisChecker()
        test_domain = "example.com"
        whois_info = await whois_checker.get_whois_info(test_domain)
        if whois_info and whois_info.registrar:
            logger.info(
                f"‚úÖ WHOIS —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç. "
                f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è {test_domain}: {whois_info.registrar}"
            )
            return True
        else:
            logger.warning("‚ö†Ô∏è WHOIS —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ WHOIS —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return False


async def check_dns_service():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É DNS —Å–µ—Ä–≤–∏—Å–∞.
    
    Returns:
        bool: True, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞, –∏–Ω–∞—á–µ False
    """
    try:
        dns_checker = DNSChecker()
        test_domain = "example.com"
        dns_info = await dns_checker.get_dns_info(test_domain)
        if dns_info and dns_info.records:
            logger.info(
                f"‚úÖ DNS —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç. "
                f"–ü–æ–ª—É—á–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –¥–ª—è {test_domain}: {list(dns_info.records.keys())}"
            )
            return True
        else:
            logger.warning("‚ö†Ô∏è DNS —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ DNS —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return False


async def run_healthcheck():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã.
    
    Returns:
        int: 0 - –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω—ã, 1 - –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
    """
    try:
        config = load_config()
        logger.info("üìã –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º—ã...")
        
        db_check = await check_database(config)
        whois_check = await check_whois_service()
        dns_check = await check_dns_service()
        
        all_ok = db_check and whois_check and dns_check
        
        if all_ok:
            logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return 0
        else:
            logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
            return 1
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(run_healthcheck())
    sys.exit(exit_code) 