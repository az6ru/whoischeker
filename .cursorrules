# Правила разработки проекта WhoisChecker

## Общие правила
- Использовать Python 3.11 или выше
- Следовать PEP 8 для стиля кода
- Использовать типизацию для всех функций
- Документировать все публичные функции и классы
- Использовать английский язык для кода и комментариев

## Форматирование
- Максимальная длина строки: 88 символов (black)
- Отступы: 4 пробела
- Кодировка файлов: UTF-8
- Окончания строк: LF (Unix-style)

## Именование
- Классы: PascalCase
- Функции и переменные: snake_case
- Константы: UPPER_SNAKE_CASE
- Приватные методы/переменные: _leading_underscore
- Защищенные методы/переменные: __double_underscore

## Структура проекта
```
whoischeker/
├── docs/           # Документация
├── src/            # Исходный код
│   ├── bot/        # Telegram бот
│   ├── core/       # Ядро системы
│   ├── db/         # Работа с БД
│   └── utils/      # Утилиты
├── tests/          # Тесты
├── scripts/        # Скрипты
└── config/         # Конфигурация
```

## Зависимости
- Использовать poetry для управления зависимостями
- Фиксировать версии в pyproject.toml
- Регулярно обновлять зависимости

## Тестирование
- Обязательное покрытие тестами нового кода
- Использовать pytest для тестов
- Писать модульные тесты для критических компонентов
- Использовать моки для внешних сервисов

## Git
- Использовать feature branches
- Следовать Conventional Commits
- Проводить code review перед мержем
- Писать понятные commit messages

## Безопасность
- Не коммитить секреты и токены
- Использовать переменные окружения
- Валидировать все входные данные
- Логировать критические операции

## Производительность
- Использовать асинхронные операции
- Применять кэширование где возможно
- Оптимизировать запросы к БД
- Контролировать использование памяти

## Документация
- Поддерживать README в актуальном состоянии
- Документировать изменения в CHANGELOG
- Обновлять документацию при изменении API
- Включать примеры использования 